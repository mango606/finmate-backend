<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.finmate.member.mapper.MemberMapper">

    <!-- 결과 매핑 -->
    <resultMap id="MemberMap" type="com.example.finmate.member.domain.MemberVO">
        <id property="userId" column="user_id"/>
        <result property="userPassword" column="user_password"/>
        <result property="userName" column="user_name"/>
        <result property="userEmail" column="user_email"/>
        <result property="userPhone" column="user_phone"/>
        <result property="birthDate" column="birth_date"/>
        <result property="gender" column="gender"/>
        <result property="regDate" column="reg_date"/>
        <result property="updateDate" column="update_date"/>
        <result property="isActive" column="is_active"/>
        <collection property="authList" resultMap="AuthMap"/>
    </resultMap>

    <resultMap id="AuthMap" type="com.example.finmate.member.domain.MemberAuthVO">
        <result property="userId" column="user_id"/>
        <result property="auth" column="auth"/>
    </resultMap>

    <!-- 회원 등록 -->
    <insert id="insertMember" parameterType="com.example.finmate.member.domain.MemberVO">
        INSERT INTO tbl_member (
            user_id, user_password, user_name, user_email, user_phone,
            birth_date, gender, reg_date, update_date, is_active
        ) VALUES (
                     #{userId}, #{userPassword}, #{userName}, #{userEmail}, #{userPhone},
                     #{birthDate}, #{gender}, NOW(), NOW(), #{isActive}
                 )
    </insert>

    <!-- 회원 권한 등록 -->
    <insert id="insertMemberAuth" parameterType="com.example.finmate.member.domain.MemberAuthVO">
        INSERT INTO tbl_member_auth (user_id, auth)
        VALUES (#{userId}, #{auth})
    </insert>

    <!-- 사용자 ID로 회원 조회 (권한 포함) -->
    <select id="getMemberByUserId" parameterType="string" resultMap="MemberMap">
        SELECT
            m.user_id, m.user_password, m.user_name, m.user_email, m.user_phone,
            m.birth_date, m.gender, m.reg_date, m.update_date, m.is_active,
            a.auth
        FROM tbl_member m
                 LEFT JOIN tbl_member_auth a ON m.user_id = a.user_id
        WHERE m.user_id = #{userId}
          AND m.is_active = true
    </select>

    <!-- 사용자 ID로 권한 조회 -->
    <select id="getMemberAuthByUserId" parameterType="string" resultType="com.example.finmate.member.domain.MemberAuthVO">
        SELECT user_id, auth
        FROM tbl_member_auth
        WHERE user_id = #{userId}
    </select>

    <!-- 이메일로 회원 조회 -->
    <select id="getMemberByUserEmail" parameterType="string" resultMap="MemberMap">
        SELECT
            m.user_id, m.user_password, m.user_name, m.user_email, m.user_phone,
            m.birth_date, m.gender, m.reg_date, m.update_date, m.is_active,
            a.auth
        FROM tbl_member m
                 LEFT JOIN tbl_member_auth a ON m.user_id = a.user_id
        WHERE m.user_email = #{userEmail}
          AND m.is_active = true
    </select>

    <!-- 회원 정보 수정 -->
    <update id="updateMember" parameterType="com.example.finmate.member.domain.MemberVO">
        UPDATE tbl_member
        SET
            user_name = #{userName},
            user_email = #{userEmail},
            user_phone = #{userPhone},
            birth_date = #{birthDate},
            gender = #{gender},
            update_date = NOW()
        WHERE user_id = #{userId}
    </update>

    <!-- 비밀번호 변경 -->
    <update id="updateMemberPassword" parameterType="map">
        UPDATE tbl_member
        SET
            user_password = #{userPassword},
            update_date = NOW()
        WHERE user_id = #{userId}
    </update>

    <!-- 회원 비활성화 -->
    <update id="deleteMember" parameterType="string">
        UPDATE tbl_member
        SET
            is_active = false,
            update_date = NOW()
        WHERE user_id = #{userId}
    </update>

    <!-- 회원 활성화/비활성화 -->
    <update id="updateMemberActive" parameterType="map">
        UPDATE tbl_member
        SET
            is_active = #{isActive},
            update_date = NOW()
        WHERE user_id = #{userId}
    </update>

    <!-- 사용자 ID 중복 확인 -->
    <select id="checkUserIdDuplicate" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM tbl_member
        WHERE user_id = #{userId}
    </select>

    <!-- 이메일 중복 확인 -->
    <select id="checkUserEmailDuplicate" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM tbl_member
        WHERE user_email = #{userEmail}
    </select>

</mapper>